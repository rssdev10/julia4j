plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'org.julia'
version = '0.0.3-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
    mavenLocal()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = rootProject.name
            version = project.version

            from components.java
        }
    }
}

// Helper function to get Julia's lib directory (cross-platform)
def getJuliaLibPath() {
    def juliaCmd = [
        'julia',
        '-e',
        'print(abspath(joinpath(dirname(Sys.BINDIR), string(:lib))))'
    ]
    def process = juliaCmd.execute()
    process.waitFor()
    if (process.exitValue() != 0) {
        throw new GradleException("Failed to find Julia lib path: ${process.err.text}")
    }
    return process.text.trim()
}

// Helper to detect OS in a stable way
def getOsName() {
    def os = System.getProperty('os.name').toLowerCase()
    if (os.contains('mac')) return 'mac'
    if (os.contains('win')) return 'windows'
    if (os.contains('nux')) return 'linux'
    return 'other'
}

tasks.test {
    useJUnitPlatform()

    testClassesDirs = testing.suites.test.sources.output.classesDirs
    classpath = testing.suites.test.sources.runtimeClasspath

    doFirst {
        def juliaLibPath = getJuliaLibPath()
        def osName = getOsName()

        if (osName == 'mac') {
            def current = System.getenv('DYLD_LIBRARY_PATH')
            environment "DYLD_LIBRARY_PATH", juliaLibPath + (current ? ":" + current : "")
        } else if (osName == 'linux') {
            def current = System.getenv('LD_LIBRARY_PATH')
            environment "LD_LIBRARY_PATH", juliaLibPath + (current ? ":" + current : "")
        } else if (osName == 'windows') {
            def current = System.getenv('PATH') ?: ""
            environment "PATH", juliaLibPath + File.pathSeparator + current
        }
    }
}

tasks.named('jar') {
    manifest {
        attributes(
            'Automatic-Module-Name': 'JuliaEngine',
            'Implementation-Version': project.version
        )
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.4'
}
